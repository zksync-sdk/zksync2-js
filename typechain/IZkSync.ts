/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type VerifierParamsStruct = {
  recursionNodeLevelVkHash: BytesLike;
  recursionLeafLevelVkHash: BytesLike;
  recursionCircuitsSetVksHash: BytesLike;
};

export type VerifierParamsStructOutput = [
  recursionNodeLevelVkHash: string,
  recursionLeafLevelVkHash: string,
  recursionCircuitsSetVksHash: string
] & {
  recursionNodeLevelVkHash: string;
  recursionLeafLevelVkHash: string;
  recursionCircuitsSetVksHash: string;
};

export type PriorityOperationStruct = {
  canonicalTxHash: BytesLike;
  expirationTimestamp: BigNumberish;
  layer2Tip: BigNumberish;
};

export type PriorityOperationStructOutput = [
  canonicalTxHash: string,
  expirationTimestamp: bigint,
  layer2Tip: bigint
] & { canonicalTxHash: string; expirationTimestamp: bigint; layer2Tip: bigint };

export type L2LogStruct = {
  l2ShardId: BigNumberish;
  isService: boolean;
  txNumberInBlock: BigNumberish;
  sender: AddressLike;
  key: BytesLike;
  value: BytesLike;
};

export type L2LogStructOutput = [
  l2ShardId: bigint,
  isService: boolean,
  txNumberInBlock: bigint,
  sender: string,
  key: string,
  value: string
] & {
  l2ShardId: bigint;
  isService: boolean;
  txNumberInBlock: bigint;
  sender: string;
  key: string;
  value: string;
};

export type L2MessageStruct = {
  txNumberInBlock: BigNumberish;
  sender: AddressLike;
  data: BytesLike;
};

export type L2MessageStructOutput = [
  txNumberInBlock: bigint,
  sender: string,
  data: string
] & { txNumberInBlock: bigint; sender: string; data: string };

export declare namespace IMailbox {
  export type L2CanonicalTransactionStruct = {
    txType: BigNumberish;
    from: BigNumberish;
    to: BigNumberish;
    gasLimit: BigNumberish;
    gasPerPubdataByteLimit: BigNumberish;
    maxFeePerGas: BigNumberish;
    maxPriorityFeePerGas: BigNumberish;
    paymaster: BigNumberish;
    nonce: BigNumberish;
    value: BigNumberish;
    reserved: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
    data: BytesLike;
    signature: BytesLike;
    factoryDeps: BigNumberish[];
    paymasterInput: BytesLike;
    reservedDynamic: BytesLike;
  };

  export type L2CanonicalTransactionStructOutput = [
    txType: bigint,
    from: bigint,
    to: bigint,
    gasLimit: bigint,
    gasPerPubdataByteLimit: bigint,
    maxFeePerGas: bigint,
    maxPriorityFeePerGas: bigint,
    paymaster: bigint,
    nonce: bigint,
    value: bigint,
    reserved: [bigint, bigint, bigint, bigint],
    data: string,
    signature: string,
    factoryDeps: bigint[],
    paymasterInput: string,
    reservedDynamic: string
  ] & {
    txType: bigint;
    from: bigint;
    to: bigint;
    gasLimit: bigint;
    gasPerPubdataByteLimit: bigint;
    maxFeePerGas: bigint;
    maxPriorityFeePerGas: bigint;
    paymaster: bigint;
    nonce: bigint;
    value: bigint;
    reserved: [bigint, bigint, bigint, bigint];
    data: string;
    signature: string;
    factoryDeps: bigint[];
    paymasterInput: string;
    reservedDynamic: string;
  };
}

export declare namespace Diamond {
  export type FacetCutStruct = {
    facet: AddressLike;
    action: BigNumberish;
    isFreezable: boolean;
    selectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    facet: string,
    action: bigint,
    isFreezable: boolean,
    selectors: string[]
  ] & {
    facet: string;
    action: bigint;
    isFreezable: boolean;
    selectors: string[];
  };

  export type DiamondCutDataStruct = {
    facetCuts: Diamond.FacetCutStruct[];
    initAddress: AddressLike;
    initCalldata: BytesLike;
  };

  export type DiamondCutDataStructOutput = [
    facetCuts: Diamond.FacetCutStructOutput[],
    initAddress: string,
    initCalldata: string
  ] & {
    facetCuts: Diamond.FacetCutStructOutput[];
    initAddress: string;
    initCalldata: string;
  };
}

export declare namespace IExecutor {
  export type StoredBlockInfoStruct = {
    blockNumber: BigNumberish;
    blockHash: BytesLike;
    indexRepeatedStorageChanges: BigNumberish;
    numberOfLayer1Txs: BigNumberish;
    priorityOperationsHash: BytesLike;
    l2LogsTreeRoot: BytesLike;
    timestamp: BigNumberish;
    commitment: BytesLike;
  };

  export type StoredBlockInfoStructOutput = [
    blockNumber: bigint,
    blockHash: string,
    indexRepeatedStorageChanges: bigint,
    numberOfLayer1Txs: bigint,
    priorityOperationsHash: string,
    l2LogsTreeRoot: string,
    timestamp: bigint,
    commitment: string
  ] & {
    blockNumber: bigint;
    blockHash: string;
    indexRepeatedStorageChanges: bigint;
    numberOfLayer1Txs: bigint;
    priorityOperationsHash: string;
    l2LogsTreeRoot: string;
    timestamp: bigint;
    commitment: string;
  };

  export type CommitBlockInfoStruct = {
    blockNumber: BigNumberish;
    timestamp: BigNumberish;
    indexRepeatedStorageChanges: BigNumberish;
    newStateRoot: BytesLike;
    numberOfLayer1Txs: BigNumberish;
    l2LogsTreeRoot: BytesLike;
    priorityOperationsHash: BytesLike;
    initialStorageChanges: BytesLike;
    repeatedStorageChanges: BytesLike;
    l2Logs: BytesLike;
    l2ArbitraryLengthMessages: BytesLike[];
    factoryDeps: BytesLike[];
  };

  export type CommitBlockInfoStructOutput = [
    blockNumber: bigint,
    timestamp: bigint,
    indexRepeatedStorageChanges: bigint,
    newStateRoot: string,
    numberOfLayer1Txs: bigint,
    l2LogsTreeRoot: string,
    priorityOperationsHash: string,
    initialStorageChanges: string,
    repeatedStorageChanges: string,
    l2Logs: string,
    l2ArbitraryLengthMessages: string[],
    factoryDeps: string[]
  ] & {
    blockNumber: bigint;
    timestamp: bigint;
    indexRepeatedStorageChanges: bigint;
    newStateRoot: string;
    numberOfLayer1Txs: bigint;
    l2LogsTreeRoot: string;
    priorityOperationsHash: string;
    initialStorageChanges: string;
    repeatedStorageChanges: string;
    l2Logs: string;
    l2ArbitraryLengthMessages: string[];
    factoryDeps: string[];
  };

  export type ProofInputStruct = {
    recursiveAggregationInput: BigNumberish[];
    serializedProof: BigNumberish[];
  };

  export type ProofInputStructOutput = [
    recursiveAggregationInput: bigint[],
    serializedProof: bigint[]
  ] & { recursiveAggregationInput: bigint[]; serializedProof: bigint[] };
}

export declare namespace IGetters {
  export type FacetStruct = { addr: AddressLike; selectors: BytesLike[] };

  export type FacetStructOutput = [addr: string, selectors: string[]] & {
    addr: string;
    selectors: string[];
  };
}

export interface IZkSyncInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptGovernor"
      | "cancelUpgradeProposal"
      | "commitBlocks"
      | "executeBlocks"
      | "executeUpgrade"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "finalizeEthWithdrawal"
      | "freezeDiamond"
      | "getAllowList"
      | "getCurrentProposalId"
      | "getFirstUnprocessedPriorityTx"
      | "getGovernor"
      | "getL2BootloaderBytecodeHash"
      | "getL2DefaultAccountBytecodeHash"
      | "getPendingGovernor"
      | "getPriorityQueueSize"
      | "getPriorityTxMaxGasLimit"
      | "getProposedUpgradeHash"
      | "getProposedUpgradeTimestamp"
      | "getSecurityCouncil"
      | "getTotalBlocksCommitted"
      | "getTotalBlocksExecuted"
      | "getTotalBlocksVerified"
      | "getTotalPriorityTxs"
      | "getUpgradeProposalState"
      | "getVerifier"
      | "getVerifierParams"
      | "isApprovedBySecurityCouncil"
      | "isDiamondStorageFrozen"
      | "isEthWithdrawalFinalized"
      | "isFacetFreezable"
      | "isFunctionFreezable"
      | "isValidator"
      | "l2LogsRootHash"
      | "l2TransactionBaseCost"
      | "priorityQueueFrontOperation"
      | "proposeShadowUpgrade"
      | "proposeTransparentUpgrade"
      | "proveBlocks"
      | "proveL1ToL2TransactionStatus"
      | "proveL2LogInclusion"
      | "proveL2MessageInclusion"
      | "requestL2Transaction"
      | "revertBlocks"
      | "securityCouncilUpgradeApprove"
      | "setAllowList"
      | "setL2BootloaderBytecodeHash"
      | "setL2DefaultAccountBytecodeHash"
      | "setPendingGovernor"
      | "setPorterAvailability"
      | "setPriorityTxMaxGasLimit"
      | "setValidator"
      | "setVerifier"
      | "setVerifierParams"
      | "storedBlockHash"
      | "unfreezeDiamond"
      | "upgradeProposalHash"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlockCommit"
      | "BlockExecution"
      | "BlocksRevert"
      | "BlocksVerification"
      | "CancelUpgradeProposal"
      | "EthWithdrawalFinalized"
      | "ExecuteUpgrade"
      | "Freeze"
      | "IsPorterAvailableStatusUpdate"
      | "NewAllowList"
      | "NewGovernor"
      | "NewL2BootloaderBytecodeHash"
      | "NewL2DefaultAccountBytecodeHash"
      | "NewPendingGovernor"
      | "NewPriorityRequest"
      | "NewPriorityTxMaxGasLimit"
      | "NewVerifier"
      | "NewVerifierParams"
      | "ProposeShadowUpgrade"
      | "ProposeTransparentUpgrade"
      | "SecurityCouncilUpgradeApprove"
      | "Unfreeze"
      | "ValidatorStatusUpdate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpgradeProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitBlocks",
    values: [IExecutor.StoredBlockInfoStruct, IExecutor.CommitBlockInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBlocks",
    values: [IExecutor.StoredBlockInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgrade",
    values: [Diamond.DiamondCutDataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeEthWithdrawal",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstUnprocessedPriorityTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2BootloaderBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedUpgradeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedUpgradeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityTxs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgradeProposalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifierParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedBySecurityCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDiamondStorageFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFacetFreezable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionFreezable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "l2LogsRootHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityQueueFrontOperation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeShadowUpgrade",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTransparentUpgrade",
    values: [Diamond.DiamondCutDataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proveBlocks",
    values: [
      IExecutor.StoredBlockInfoStruct,
      IExecutor.StoredBlockInfoStruct[],
      IExecutor.ProofInputStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL1ToL2TransactionStatus",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [BigNumberish, BigNumberish, L2LogStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [BigNumberish, BigNumberish, L2MessageStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "securityCouncilUpgradeApprove",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2BootloaderBytecodeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setL2DefaultAccountBytecodeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPorterAvailability",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriorityTxMaxGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifierParams",
    values: [VerifierParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeProposalHash",
    values: [Diamond.DiamondCutDataStruct, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpgradeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEthWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstUnprocessedPriorityTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedUpgradeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedUpgradeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgradeProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedBySecurityCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDiamondStorageFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFacetFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionFreezable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2LogsRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityQueueFrontOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeShadowUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransparentUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL1ToL2TransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityCouncilUpgradeApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2BootloaderBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL2DefaultAccountBytecodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPorterAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifierParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeProposalHash",
    data: BytesLike
  ): Result;
}

export namespace BlockCommitEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    blockHash: BytesLike,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    blockHash: string,
    commitment: string
  ];
  export interface OutputObject {
    blockNumber: bigint;
    blockHash: string;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockExecutionEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    blockHash: BytesLike,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    blockHash: string,
    commitment: string
  ];
  export interface OutputObject {
    blockNumber: bigint;
    blockHash: string;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocksRevertEvent {
  export type InputTuple = [
    totalBlocksCommitted: BigNumberish,
    totalBlocksVerified: BigNumberish,
    totalBlocksExecuted: BigNumberish
  ];
  export type OutputTuple = [
    totalBlocksCommitted: bigint,
    totalBlocksVerified: bigint,
    totalBlocksExecuted: bigint
  ];
  export interface OutputObject {
    totalBlocksCommitted: bigint;
    totalBlocksVerified: bigint;
    totalBlocksExecuted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocksVerificationEvent {
  export type InputTuple = [
    previousLastVerifiedBlock: BigNumberish,
    currentLastVerifiedBlock: BigNumberish
  ];
  export type OutputTuple = [
    previousLastVerifiedBlock: bigint,
    currentLastVerifiedBlock: bigint
  ];
  export interface OutputObject {
    previousLastVerifiedBlock: bigint;
    currentLastVerifiedBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelUpgradeProposalEvent {
  export type InputTuple = [proposalId: BigNumberish, proposalHash: BytesLike];
  export type OutputTuple = [proposalId: bigint, proposalHash: string];
  export interface OutputObject {
    proposalId: bigint;
    proposalHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EthWithdrawalFinalizedEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteUpgradeEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposalHash: BytesLike,
    proposalSalt: BytesLike
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposalHash: string,
    proposalSalt: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposalHash: string;
    proposalSalt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FreezeEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsPorterAvailableStatusUpdateEvent {
  export type InputTuple = [isPorterAvailable: boolean];
  export type OutputTuple = [isPorterAvailable: boolean];
  export interface OutputObject {
    isPorterAvailable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAllowListEvent {
  export type InputTuple = [
    oldAllowList: AddressLike,
    newAllowList: AddressLike
  ];
  export type OutputTuple = [oldAllowList: string, newAllowList: string];
  export interface OutputObject {
    oldAllowList: string;
    newAllowList: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGovernorEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewL2BootloaderBytecodeHashEvent {
  export type InputTuple = [
    previousBytecodeHash: BytesLike,
    newBytecodeHash: BytesLike
  ];
  export type OutputTuple = [
    previousBytecodeHash: string,
    newBytecodeHash: string
  ];
  export interface OutputObject {
    previousBytecodeHash: string;
    newBytecodeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewL2DefaultAccountBytecodeHashEvent {
  export type InputTuple = [
    previousBytecodeHash: BytesLike,
    newBytecodeHash: BytesLike
  ];
  export type OutputTuple = [
    previousBytecodeHash: string,
    newBytecodeHash: string
  ];
  export interface OutputObject {
    previousBytecodeHash: string;
    newBytecodeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingGovernorEvent {
  export type InputTuple = [
    oldPendingGovernor: AddressLike,
    newPendingGovernor: AddressLike
  ];
  export type OutputTuple = [
    oldPendingGovernor: string,
    newPendingGovernor: string
  ];
  export interface OutputObject {
    oldPendingGovernor: string;
    newPendingGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPriorityRequestEvent {
  export type InputTuple = [
    txId: BigNumberish,
    txHash: BytesLike,
    expirationTimestamp: BigNumberish,
    transaction: IMailbox.L2CanonicalTransactionStruct,
    factoryDeps: BytesLike[]
  ];
  export type OutputTuple = [
    txId: bigint,
    txHash: string,
    expirationTimestamp: bigint,
    transaction: IMailbox.L2CanonicalTransactionStructOutput,
    factoryDeps: string[]
  ];
  export interface OutputObject {
    txId: bigint;
    txHash: string;
    expirationTimestamp: bigint;
    transaction: IMailbox.L2CanonicalTransactionStructOutput;
    factoryDeps: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPriorityTxMaxGasLimitEvent {
  export type InputTuple = [
    oldPriorityTxMaxGasLimit: BigNumberish,
    newPriorityTxMaxGasLimit: BigNumberish
  ];
  export type OutputTuple = [
    oldPriorityTxMaxGasLimit: bigint,
    newPriorityTxMaxGasLimit: bigint
  ];
  export interface OutputObject {
    oldPriorityTxMaxGasLimit: bigint;
    newPriorityTxMaxGasLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewVerifierEvent {
  export type InputTuple = [oldVerifier: AddressLike, newVerifier: AddressLike];
  export type OutputTuple = [oldVerifier: string, newVerifier: string];
  export interface OutputObject {
    oldVerifier: string;
    newVerifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewVerifierParamsEvent {
  export type InputTuple = [
    oldVerifierParams: VerifierParamsStruct,
    newVerifierParams: VerifierParamsStruct
  ];
  export type OutputTuple = [
    oldVerifierParams: VerifierParamsStructOutput,
    newVerifierParams: VerifierParamsStructOutput
  ];
  export interface OutputObject {
    oldVerifierParams: VerifierParamsStructOutput;
    newVerifierParams: VerifierParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposeShadowUpgradeEvent {
  export type InputTuple = [proposalId: BigNumberish, proposalHash: BytesLike];
  export type OutputTuple = [proposalId: bigint, proposalHash: string];
  export interface OutputObject {
    proposalId: bigint;
    proposalHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposeTransparentUpgradeEvent {
  export type InputTuple = [
    diamondCut: Diamond.DiamondCutDataStruct,
    proposalId: BigNumberish,
    proposalSalt: BytesLike
  ];
  export type OutputTuple = [
    diamondCut: Diamond.DiamondCutDataStructOutput,
    proposalId: bigint,
    proposalSalt: string
  ];
  export interface OutputObject {
    diamondCut: Diamond.DiamondCutDataStructOutput;
    proposalId: bigint;
    proposalSalt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityCouncilUpgradeApproveEvent {
  export type InputTuple = [proposalId: BigNumberish, proposalHash: BytesLike];
  export type OutputTuple = [proposalId: bigint, proposalHash: string];
  export interface OutputObject {
    proposalId: bigint;
    proposalHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnfreezeEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorStatusUpdateEvent {
  export type InputTuple = [validatorAddress: AddressLike, isActive: boolean];
  export type OutputTuple = [validatorAddress: string, isActive: boolean];
  export interface OutputObject {
    validatorAddress: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IZkSync extends BaseContract {
  connect(runner?: ContractRunner | null): IZkSync;
  waitForDeployment(): Promise<this>;

  interface: IZkSyncInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptGovernor: TypedContractMethod<[], [void], "nonpayable">;

  cancelUpgradeProposal: TypedContractMethod<
    [_proposedUpgradeHash: BytesLike],
    [void],
    "nonpayable"
  >;

  commitBlocks: TypedContractMethod<
    [
      _lastCommittedBlockData: IExecutor.StoredBlockInfoStruct,
      _newBlocksData: IExecutor.CommitBlockInfoStruct[]
    ],
    [void],
    "nonpayable"
  >;

  executeBlocks: TypedContractMethod<
    [_blocksData: IExecutor.StoredBlockInfoStruct[]],
    [void],
    "nonpayable"
  >;

  executeUpgrade: TypedContractMethod<
    [_diamondCut: Diamond.DiamondCutDataStruct, _proposalSalt: BytesLike],
    [void],
    "nonpayable"
  >;

  facetAddress: TypedContractMethod<[_selector: BytesLike], [string], "view">;

  facetAddresses: TypedContractMethod<[], [string[]], "view">;

  facetFunctionSelectors: TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  facets: TypedContractMethod<[], [IGetters.FacetStructOutput[]], "view">;

  finalizeEthWithdrawal: TypedContractMethod<
    [
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  freezeDiamond: TypedContractMethod<[], [void], "nonpayable">;

  getAllowList: TypedContractMethod<[], [string], "view">;

  getCurrentProposalId: TypedContractMethod<[], [bigint], "view">;

  getFirstUnprocessedPriorityTx: TypedContractMethod<[], [bigint], "view">;

  getGovernor: TypedContractMethod<[], [string], "view">;

  getL2BootloaderBytecodeHash: TypedContractMethod<[], [string], "view">;

  getL2DefaultAccountBytecodeHash: TypedContractMethod<[], [string], "view">;

  getPendingGovernor: TypedContractMethod<[], [string], "view">;

  getPriorityQueueSize: TypedContractMethod<[], [bigint], "view">;

  getPriorityTxMaxGasLimit: TypedContractMethod<[], [bigint], "view">;

  getProposedUpgradeHash: TypedContractMethod<[], [string], "view">;

  getProposedUpgradeTimestamp: TypedContractMethod<[], [bigint], "view">;

  getSecurityCouncil: TypedContractMethod<[], [string], "view">;

  getTotalBlocksCommitted: TypedContractMethod<[], [bigint], "view">;

  getTotalBlocksExecuted: TypedContractMethod<[], [bigint], "view">;

  getTotalBlocksVerified: TypedContractMethod<[], [bigint], "view">;

  getTotalPriorityTxs: TypedContractMethod<[], [bigint], "view">;

  getUpgradeProposalState: TypedContractMethod<[], [bigint], "view">;

  getVerifier: TypedContractMethod<[], [string], "view">;

  getVerifierParams: TypedContractMethod<
    [],
    [VerifierParamsStructOutput],
    "view"
  >;

  isApprovedBySecurityCouncil: TypedContractMethod<[], [boolean], "view">;

  isDiamondStorageFrozen: TypedContractMethod<[], [boolean], "view">;

  isEthWithdrawalFinalized: TypedContractMethod<
    [_l2BlockNumber: BigNumberish, _l2MessageIndex: BigNumberish],
    [boolean],
    "view"
  >;

  isFacetFreezable: TypedContractMethod<
    [_facet: AddressLike],
    [boolean],
    "view"
  >;

  isFunctionFreezable: TypedContractMethod<
    [_selector: BytesLike],
    [boolean],
    "view"
  >;

  isValidator: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  l2LogsRootHash: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [string],
    "view"
  >;

  l2TransactionBaseCost: TypedContractMethod<
    [
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish
    ],
    [bigint],
    "view"
  >;

  priorityQueueFrontOperation: TypedContractMethod<
    [],
    [PriorityOperationStructOutput],
    "view"
  >;

  proposeShadowUpgrade: TypedContractMethod<
    [_proposalHash: BytesLike, _proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  proposeTransparentUpgrade: TypedContractMethod<
    [_diamondCut: Diamond.DiamondCutDataStruct, _proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  proveBlocks: TypedContractMethod<
    [
      _prevBlock: IExecutor.StoredBlockInfoStruct,
      _committedBlocks: IExecutor.StoredBlockInfoStruct[],
      _proof: IExecutor.ProofInputStruct
    ],
    [void],
    "nonpayable"
  >;

  proveL1ToL2TransactionStatus: TypedContractMethod<
    [
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish
    ],
    [boolean],
    "view"
  >;

  proveL2LogInclusion: TypedContractMethod<
    [
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: L2LogStruct,
      _proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  proveL2MessageInclusion: TypedContractMethod<
    [
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: L2MessageStruct,
      _proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  requestL2Transaction: TypedContractMethod<
    [
      _contractL2: AddressLike,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: AddressLike
    ],
    [string],
    "payable"
  >;

  revertBlocks: TypedContractMethod<
    [_newLastBlock: BigNumberish],
    [void],
    "nonpayable"
  >;

  securityCouncilUpgradeApprove: TypedContractMethod<
    [_upgradeProposalHash: BytesLike],
    [void],
    "nonpayable"
  >;

  setAllowList: TypedContractMethod<
    [_newAllowList: AddressLike],
    [void],
    "nonpayable"
  >;

  setL2BootloaderBytecodeHash: TypedContractMethod<
    [_l2BootloaderBytecodeHash: BytesLike],
    [void],
    "nonpayable"
  >;

  setL2DefaultAccountBytecodeHash: TypedContractMethod<
    [_l2DefaultAccountBytecodeHash: BytesLike],
    [void],
    "nonpayable"
  >;

  setPendingGovernor: TypedContractMethod<
    [_newPendingGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  setPorterAvailability: TypedContractMethod<
    [_zkPorterIsAvailable: boolean],
    [void],
    "nonpayable"
  >;

  setPriorityTxMaxGasLimit: TypedContractMethod<
    [_newPriorityTxMaxGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setValidator: TypedContractMethod<
    [_validator: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;

  setVerifier: TypedContractMethod<
    [_newVerifier: AddressLike],
    [void],
    "nonpayable"
  >;

  setVerifierParams: TypedContractMethod<
    [_newVerifierParams: VerifierParamsStruct],
    [void],
    "nonpayable"
  >;

  storedBlockHash: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [string],
    "view"
  >;

  unfreezeDiamond: TypedContractMethod<[], [void], "nonpayable">;

  upgradeProposalHash: TypedContractMethod<
    [
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: BigNumberish,
      _salt: BytesLike
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptGovernor"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelUpgradeProposal"
  ): TypedContractMethod<
    [_proposedUpgradeHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitBlocks"
  ): TypedContractMethod<
    [
      _lastCommittedBlockData: IExecutor.StoredBlockInfoStruct,
      _newBlocksData: IExecutor.CommitBlockInfoStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBlocks"
  ): TypedContractMethod<
    [_blocksData: IExecutor.StoredBlockInfoStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeUpgrade"
  ): TypedContractMethod<
    [_diamondCut: Diamond.DiamondCutDataStruct, _proposalSalt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "facetAddress"
  ): TypedContractMethod<[_selector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets"
  ): TypedContractMethod<[], [IGetters.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "finalizeEthWithdrawal"
  ): TypedContractMethod<
    [
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freezeDiamond"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllowList"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFirstUnprocessedPriorityTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getL2BootloaderBytecodeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getL2DefaultAccountBytecodeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPriorityQueueSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriorityTxMaxGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposedUpgradeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProposedUpgradeTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSecurityCouncil"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalBlocksCommitted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBlocksExecuted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBlocksVerified"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPriorityTxs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUpgradeProposalState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVerifierParams"
  ): TypedContractMethod<[], [VerifierParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "isApprovedBySecurityCouncil"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDiamondStorageFrozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isEthWithdrawalFinalized"
  ): TypedContractMethod<
    [_l2BlockNumber: BigNumberish, _l2MessageIndex: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFacetFreezable"
  ): TypedContractMethod<[_facet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFunctionFreezable"
  ): TypedContractMethod<[_selector: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidator"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "l2LogsRootHash"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "l2TransactionBaseCost"
  ): TypedContractMethod<
    [
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "priorityQueueFrontOperation"
  ): TypedContractMethod<[], [PriorityOperationStructOutput], "view">;
  getFunction(
    nameOrSignature: "proposeShadowUpgrade"
  ): TypedContractMethod<
    [_proposalHash: BytesLike, _proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeTransparentUpgrade"
  ): TypedContractMethod<
    [_diamondCut: Diamond.DiamondCutDataStruct, _proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proveBlocks"
  ): TypedContractMethod<
    [
      _prevBlock: IExecutor.StoredBlockInfoStruct,
      _committedBlocks: IExecutor.StoredBlockInfoStruct[],
      _proof: IExecutor.ProofInputStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proveL1ToL2TransactionStatus"
  ): TypedContractMethod<
    [
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proveL2LogInclusion"
  ): TypedContractMethod<
    [
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _log: L2LogStruct,
      _proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proveL2MessageInclusion"
  ): TypedContractMethod<
    [
      _blockNumber: BigNumberish,
      _index: BigNumberish,
      _message: L2MessageStruct,
      _proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestL2Transaction"
  ): TypedContractMethod<
    [
      _contractL2: AddressLike,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: AddressLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "revertBlocks"
  ): TypedContractMethod<[_newLastBlock: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "securityCouncilUpgradeApprove"
  ): TypedContractMethod<
    [_upgradeProposalHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowList"
  ): TypedContractMethod<[_newAllowList: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setL2BootloaderBytecodeHash"
  ): TypedContractMethod<
    [_l2BootloaderBytecodeHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setL2DefaultAccountBytecodeHash"
  ): TypedContractMethod<
    [_l2DefaultAccountBytecodeHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPendingGovernor"
  ): TypedContractMethod<
    [_newPendingGovernor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPorterAvailability"
  ): TypedContractMethod<[_zkPorterIsAvailable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriorityTxMaxGasLimit"
  ): TypedContractMethod<
    [_newPriorityTxMaxGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidator"
  ): TypedContractMethod<
    [_validator: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[_newVerifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifierParams"
  ): TypedContractMethod<
    [_newVerifierParams: VerifierParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storedBlockHash"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "unfreezeDiamond"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeProposalHash"
  ): TypedContractMethod<
    [
      _diamondCut: Diamond.DiamondCutDataStruct,
      _proposalId: BigNumberish,
      _salt: BytesLike
    ],
    [string],
    "view"
  >;

  getEvent(
    key: "BlockCommit"
  ): TypedContractEvent<
    BlockCommitEvent.InputTuple,
    BlockCommitEvent.OutputTuple,
    BlockCommitEvent.OutputObject
  >;
  getEvent(
    key: "BlockExecution"
  ): TypedContractEvent<
    BlockExecutionEvent.InputTuple,
    BlockExecutionEvent.OutputTuple,
    BlockExecutionEvent.OutputObject
  >;
  getEvent(
    key: "BlocksRevert"
  ): TypedContractEvent<
    BlocksRevertEvent.InputTuple,
    BlocksRevertEvent.OutputTuple,
    BlocksRevertEvent.OutputObject
  >;
  getEvent(
    key: "BlocksVerification"
  ): TypedContractEvent<
    BlocksVerificationEvent.InputTuple,
    BlocksVerificationEvent.OutputTuple,
    BlocksVerificationEvent.OutputObject
  >;
  getEvent(
    key: "CancelUpgradeProposal"
  ): TypedContractEvent<
    CancelUpgradeProposalEvent.InputTuple,
    CancelUpgradeProposalEvent.OutputTuple,
    CancelUpgradeProposalEvent.OutputObject
  >;
  getEvent(
    key: "EthWithdrawalFinalized"
  ): TypedContractEvent<
    EthWithdrawalFinalizedEvent.InputTuple,
    EthWithdrawalFinalizedEvent.OutputTuple,
    EthWithdrawalFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteUpgrade"
  ): TypedContractEvent<
    ExecuteUpgradeEvent.InputTuple,
    ExecuteUpgradeEvent.OutputTuple,
    ExecuteUpgradeEvent.OutputObject
  >;
  getEvent(
    key: "Freeze"
  ): TypedContractEvent<
    FreezeEvent.InputTuple,
    FreezeEvent.OutputTuple,
    FreezeEvent.OutputObject
  >;
  getEvent(
    key: "IsPorterAvailableStatusUpdate"
  ): TypedContractEvent<
    IsPorterAvailableStatusUpdateEvent.InputTuple,
    IsPorterAvailableStatusUpdateEvent.OutputTuple,
    IsPorterAvailableStatusUpdateEvent.OutputObject
  >;
  getEvent(
    key: "NewAllowList"
  ): TypedContractEvent<
    NewAllowListEvent.InputTuple,
    NewAllowListEvent.OutputTuple,
    NewAllowListEvent.OutputObject
  >;
  getEvent(
    key: "NewGovernor"
  ): TypedContractEvent<
    NewGovernorEvent.InputTuple,
    NewGovernorEvent.OutputTuple,
    NewGovernorEvent.OutputObject
  >;
  getEvent(
    key: "NewL2BootloaderBytecodeHash"
  ): TypedContractEvent<
    NewL2BootloaderBytecodeHashEvent.InputTuple,
    NewL2BootloaderBytecodeHashEvent.OutputTuple,
    NewL2BootloaderBytecodeHashEvent.OutputObject
  >;
  getEvent(
    key: "NewL2DefaultAccountBytecodeHash"
  ): TypedContractEvent<
    NewL2DefaultAccountBytecodeHashEvent.InputTuple,
    NewL2DefaultAccountBytecodeHashEvent.OutputTuple,
    NewL2DefaultAccountBytecodeHashEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingGovernor"
  ): TypedContractEvent<
    NewPendingGovernorEvent.InputTuple,
    NewPendingGovernorEvent.OutputTuple,
    NewPendingGovernorEvent.OutputObject
  >;
  getEvent(
    key: "NewPriorityRequest"
  ): TypedContractEvent<
    NewPriorityRequestEvent.InputTuple,
    NewPriorityRequestEvent.OutputTuple,
    NewPriorityRequestEvent.OutputObject
  >;
  getEvent(
    key: "NewPriorityTxMaxGasLimit"
  ): TypedContractEvent<
    NewPriorityTxMaxGasLimitEvent.InputTuple,
    NewPriorityTxMaxGasLimitEvent.OutputTuple,
    NewPriorityTxMaxGasLimitEvent.OutputObject
  >;
  getEvent(
    key: "NewVerifier"
  ): TypedContractEvent<
    NewVerifierEvent.InputTuple,
    NewVerifierEvent.OutputTuple,
    NewVerifierEvent.OutputObject
  >;
  getEvent(
    key: "NewVerifierParams"
  ): TypedContractEvent<
    NewVerifierParamsEvent.InputTuple,
    NewVerifierParamsEvent.OutputTuple,
    NewVerifierParamsEvent.OutputObject
  >;
  getEvent(
    key: "ProposeShadowUpgrade"
  ): TypedContractEvent<
    ProposeShadowUpgradeEvent.InputTuple,
    ProposeShadowUpgradeEvent.OutputTuple,
    ProposeShadowUpgradeEvent.OutputObject
  >;
  getEvent(
    key: "ProposeTransparentUpgrade"
  ): TypedContractEvent<
    ProposeTransparentUpgradeEvent.InputTuple,
    ProposeTransparentUpgradeEvent.OutputTuple,
    ProposeTransparentUpgradeEvent.OutputObject
  >;
  getEvent(
    key: "SecurityCouncilUpgradeApprove"
  ): TypedContractEvent<
    SecurityCouncilUpgradeApproveEvent.InputTuple,
    SecurityCouncilUpgradeApproveEvent.OutputTuple,
    SecurityCouncilUpgradeApproveEvent.OutputObject
  >;
  getEvent(
    key: "Unfreeze"
  ): TypedContractEvent<
    UnfreezeEvent.InputTuple,
    UnfreezeEvent.OutputTuple,
    UnfreezeEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorStatusUpdate"
  ): TypedContractEvent<
    ValidatorStatusUpdateEvent.InputTuple,
    ValidatorStatusUpdateEvent.OutputTuple,
    ValidatorStatusUpdateEvent.OutputObject
  >;

  filters: {
    "BlockCommit(uint256,bytes32,bytes32)": TypedContractEvent<
      BlockCommitEvent.InputTuple,
      BlockCommitEvent.OutputTuple,
      BlockCommitEvent.OutputObject
    >;
    BlockCommit: TypedContractEvent<
      BlockCommitEvent.InputTuple,
      BlockCommitEvent.OutputTuple,
      BlockCommitEvent.OutputObject
    >;

    "BlockExecution(uint256,bytes32,bytes32)": TypedContractEvent<
      BlockExecutionEvent.InputTuple,
      BlockExecutionEvent.OutputTuple,
      BlockExecutionEvent.OutputObject
    >;
    BlockExecution: TypedContractEvent<
      BlockExecutionEvent.InputTuple,
      BlockExecutionEvent.OutputTuple,
      BlockExecutionEvent.OutputObject
    >;

    "BlocksRevert(uint256,uint256,uint256)": TypedContractEvent<
      BlocksRevertEvent.InputTuple,
      BlocksRevertEvent.OutputTuple,
      BlocksRevertEvent.OutputObject
    >;
    BlocksRevert: TypedContractEvent<
      BlocksRevertEvent.InputTuple,
      BlocksRevertEvent.OutputTuple,
      BlocksRevertEvent.OutputObject
    >;

    "BlocksVerification(uint256,uint256)": TypedContractEvent<
      BlocksVerificationEvent.InputTuple,
      BlocksVerificationEvent.OutputTuple,
      BlocksVerificationEvent.OutputObject
    >;
    BlocksVerification: TypedContractEvent<
      BlocksVerificationEvent.InputTuple,
      BlocksVerificationEvent.OutputTuple,
      BlocksVerificationEvent.OutputObject
    >;

    "CancelUpgradeProposal(uint256,bytes32)": TypedContractEvent<
      CancelUpgradeProposalEvent.InputTuple,
      CancelUpgradeProposalEvent.OutputTuple,
      CancelUpgradeProposalEvent.OutputObject
    >;
    CancelUpgradeProposal: TypedContractEvent<
      CancelUpgradeProposalEvent.InputTuple,
      CancelUpgradeProposalEvent.OutputTuple,
      CancelUpgradeProposalEvent.OutputObject
    >;

    "EthWithdrawalFinalized(address,uint256)": TypedContractEvent<
      EthWithdrawalFinalizedEvent.InputTuple,
      EthWithdrawalFinalizedEvent.OutputTuple,
      EthWithdrawalFinalizedEvent.OutputObject
    >;
    EthWithdrawalFinalized: TypedContractEvent<
      EthWithdrawalFinalizedEvent.InputTuple,
      EthWithdrawalFinalizedEvent.OutputTuple,
      EthWithdrawalFinalizedEvent.OutputObject
    >;

    "ExecuteUpgrade(uint256,bytes32,bytes32)": TypedContractEvent<
      ExecuteUpgradeEvent.InputTuple,
      ExecuteUpgradeEvent.OutputTuple,
      ExecuteUpgradeEvent.OutputObject
    >;
    ExecuteUpgrade: TypedContractEvent<
      ExecuteUpgradeEvent.InputTuple,
      ExecuteUpgradeEvent.OutputTuple,
      ExecuteUpgradeEvent.OutputObject
    >;

    "Freeze()": TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;
    Freeze: TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;

    "IsPorterAvailableStatusUpdate(bool)": TypedContractEvent<
      IsPorterAvailableStatusUpdateEvent.InputTuple,
      IsPorterAvailableStatusUpdateEvent.OutputTuple,
      IsPorterAvailableStatusUpdateEvent.OutputObject
    >;
    IsPorterAvailableStatusUpdate: TypedContractEvent<
      IsPorterAvailableStatusUpdateEvent.InputTuple,
      IsPorterAvailableStatusUpdateEvent.OutputTuple,
      IsPorterAvailableStatusUpdateEvent.OutputObject
    >;

    "NewAllowList(address,address)": TypedContractEvent<
      NewAllowListEvent.InputTuple,
      NewAllowListEvent.OutputTuple,
      NewAllowListEvent.OutputObject
    >;
    NewAllowList: TypedContractEvent<
      NewAllowListEvent.InputTuple,
      NewAllowListEvent.OutputTuple,
      NewAllowListEvent.OutputObject
    >;

    "NewGovernor(address,address)": TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;
    NewGovernor: TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;

    "NewL2BootloaderBytecodeHash(bytes32,bytes32)": TypedContractEvent<
      NewL2BootloaderBytecodeHashEvent.InputTuple,
      NewL2BootloaderBytecodeHashEvent.OutputTuple,
      NewL2BootloaderBytecodeHashEvent.OutputObject
    >;
    NewL2BootloaderBytecodeHash: TypedContractEvent<
      NewL2BootloaderBytecodeHashEvent.InputTuple,
      NewL2BootloaderBytecodeHashEvent.OutputTuple,
      NewL2BootloaderBytecodeHashEvent.OutputObject
    >;

    "NewL2DefaultAccountBytecodeHash(bytes32,bytes32)": TypedContractEvent<
      NewL2DefaultAccountBytecodeHashEvent.InputTuple,
      NewL2DefaultAccountBytecodeHashEvent.OutputTuple,
      NewL2DefaultAccountBytecodeHashEvent.OutputObject
    >;
    NewL2DefaultAccountBytecodeHash: TypedContractEvent<
      NewL2DefaultAccountBytecodeHashEvent.InputTuple,
      NewL2DefaultAccountBytecodeHashEvent.OutputTuple,
      NewL2DefaultAccountBytecodeHashEvent.OutputObject
    >;

    "NewPendingGovernor(address,address)": TypedContractEvent<
      NewPendingGovernorEvent.InputTuple,
      NewPendingGovernorEvent.OutputTuple,
      NewPendingGovernorEvent.OutputObject
    >;
    NewPendingGovernor: TypedContractEvent<
      NewPendingGovernorEvent.InputTuple,
      NewPendingGovernorEvent.OutputTuple,
      NewPendingGovernorEvent.OutputObject
    >;

    "NewPriorityRequest(uint256,bytes32,uint64,tuple,bytes[])": TypedContractEvent<
      NewPriorityRequestEvent.InputTuple,
      NewPriorityRequestEvent.OutputTuple,
      NewPriorityRequestEvent.OutputObject
    >;
    NewPriorityRequest: TypedContractEvent<
      NewPriorityRequestEvent.InputTuple,
      NewPriorityRequestEvent.OutputTuple,
      NewPriorityRequestEvent.OutputObject
    >;

    "NewPriorityTxMaxGasLimit(uint256,uint256)": TypedContractEvent<
      NewPriorityTxMaxGasLimitEvent.InputTuple,
      NewPriorityTxMaxGasLimitEvent.OutputTuple,
      NewPriorityTxMaxGasLimitEvent.OutputObject
    >;
    NewPriorityTxMaxGasLimit: TypedContractEvent<
      NewPriorityTxMaxGasLimitEvent.InputTuple,
      NewPriorityTxMaxGasLimitEvent.OutputTuple,
      NewPriorityTxMaxGasLimitEvent.OutputObject
    >;

    "NewVerifier(address,address)": TypedContractEvent<
      NewVerifierEvent.InputTuple,
      NewVerifierEvent.OutputTuple,
      NewVerifierEvent.OutputObject
    >;
    NewVerifier: TypedContractEvent<
      NewVerifierEvent.InputTuple,
      NewVerifierEvent.OutputTuple,
      NewVerifierEvent.OutputObject
    >;

    "NewVerifierParams(tuple,tuple)": TypedContractEvent<
      NewVerifierParamsEvent.InputTuple,
      NewVerifierParamsEvent.OutputTuple,
      NewVerifierParamsEvent.OutputObject
    >;
    NewVerifierParams: TypedContractEvent<
      NewVerifierParamsEvent.InputTuple,
      NewVerifierParamsEvent.OutputTuple,
      NewVerifierParamsEvent.OutputObject
    >;

    "ProposeShadowUpgrade(uint256,bytes32)": TypedContractEvent<
      ProposeShadowUpgradeEvent.InputTuple,
      ProposeShadowUpgradeEvent.OutputTuple,
      ProposeShadowUpgradeEvent.OutputObject
    >;
    ProposeShadowUpgrade: TypedContractEvent<
      ProposeShadowUpgradeEvent.InputTuple,
      ProposeShadowUpgradeEvent.OutputTuple,
      ProposeShadowUpgradeEvent.OutputObject
    >;

    "ProposeTransparentUpgrade(tuple,uint256,bytes32)": TypedContractEvent<
      ProposeTransparentUpgradeEvent.InputTuple,
      ProposeTransparentUpgradeEvent.OutputTuple,
      ProposeTransparentUpgradeEvent.OutputObject
    >;
    ProposeTransparentUpgrade: TypedContractEvent<
      ProposeTransparentUpgradeEvent.InputTuple,
      ProposeTransparentUpgradeEvent.OutputTuple,
      ProposeTransparentUpgradeEvent.OutputObject
    >;

    "SecurityCouncilUpgradeApprove(uint256,bytes32)": TypedContractEvent<
      SecurityCouncilUpgradeApproveEvent.InputTuple,
      SecurityCouncilUpgradeApproveEvent.OutputTuple,
      SecurityCouncilUpgradeApproveEvent.OutputObject
    >;
    SecurityCouncilUpgradeApprove: TypedContractEvent<
      SecurityCouncilUpgradeApproveEvent.InputTuple,
      SecurityCouncilUpgradeApproveEvent.OutputTuple,
      SecurityCouncilUpgradeApproveEvent.OutputObject
    >;

    "Unfreeze()": TypedContractEvent<
      UnfreezeEvent.InputTuple,
      UnfreezeEvent.OutputTuple,
      UnfreezeEvent.OutputObject
    >;
    Unfreeze: TypedContractEvent<
      UnfreezeEvent.InputTuple,
      UnfreezeEvent.OutputTuple,
      UnfreezeEvent.OutputObject
    >;

    "ValidatorStatusUpdate(address,bool)": TypedContractEvent<
      ValidatorStatusUpdateEvent.InputTuple,
      ValidatorStatusUpdateEvent.OutputTuple,
      ValidatorStatusUpdateEvent.OutputObject
    >;
    ValidatorStatusUpdate: TypedContractEvent<
      ValidatorStatusUpdateEvent.InputTuple,
      ValidatorStatusUpdateEvent.OutputTuple,
      ValidatorStatusUpdateEvent.OutputObject
    >;
  };
}
