/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IL1MessengerInterface extends Interface {
  getFunction(nameOrSignature: "sendToL1"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "L1MessageSent"): EventFragment;

  encodeFunctionData(functionFragment: "sendToL1", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "sendToL1", data: BytesLike): Result;
}

export namespace L1MessageSentEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _hash: BytesLike,
    _message: BytesLike
  ];
  export type OutputTuple = [_sender: string, _hash: string, _message: string];
  export interface OutputObject {
    _sender: string;
    _hash: string;
    _message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IL1Messenger extends BaseContract {
  connect(runner?: ContractRunner | null): IL1Messenger;
  waitForDeployment(): Promise<this>;

  interface: IL1MessengerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  sendToL1: TypedContractMethod<[_message: BytesLike], [string], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "sendToL1"
  ): TypedContractMethod<[_message: BytesLike], [string], "nonpayable">;

  getEvent(
    key: "L1MessageSent"
  ): TypedContractEvent<
    L1MessageSentEvent.InputTuple,
    L1MessageSentEvent.OutputTuple,
    L1MessageSentEvent.OutputObject
  >;

  filters: {
    "L1MessageSent(address,bytes32,bytes)": TypedContractEvent<
      L1MessageSentEvent.InputTuple,
      L1MessageSentEvent.OutputTuple,
      L1MessageSentEvent.OutputObject
    >;
    L1MessageSent: TypedContractEvent<
      L1MessageSentEvent.InputTuple,
      L1MessageSentEvent.OutputTuple,
      L1MessageSentEvent.OutputObject
    >;
  };
}
